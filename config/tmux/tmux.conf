# man tmux

set-option -g automatic-rename on
set-option -g automatic-rename-format "#{s|$HOME|~|:pane_current_path}"
set-option -g base-index 1
set-option -g bell-action none
set-option -g default-command fish
set-option -g default-shell "/usr/bin/fish" # current bashrc doesn't load nice things w/ login shell
set-option -g default-terminal "xterm-256color" # get colorschemes working in helix inside of tmux
set-option -g detach-on-destroy off # closing a session (usually by ctrl-d on shell) doesn't detach tmux session
set-option -gs escape-time 0 # Set the time in milliseconds for which tmux waits after an escape this is needed because otherwise hitting escape in vim within tmux is too slow for development
set-option -g mode-keys vi
set-option -g monitor-activity off
set-option -g mouse on
set-option -g popup-border-lines rounded
set-option -g renumber-windows on
set-option -g set-clipboard off # https://askubuntu.com/q/507214
set-option -g set-titles
set-option -g set-titles-string "#{s|$HOME|~|:pane_current_path}"
set-option -g status-interval 1
set-option -g status-left-length 25
set-option -g status-position top
set-option -g status-right "#(tmux-status-right)"
set-option -g status-right-length 40
set-option -g status-style "fg=white"
set-option -ga terminal-overrides ",xterm-256color:Tc" # see https://github.com/tmux/tmux/issues/696 see https://stackoverflow.com/a/41786092 https://unix.stackexchange.com/a/734894
set-option -ga terminal-features "*:hyperlinks" # only has an effect on tmux 3.4 and higher

set-option -ga terminal-overrides ',*:Smulx=\E[4::%p1%dm'  # undercurl support https://ryantravitz.com/blog/2023-02-18-pull-of-the-undercurl/
set-option -ga terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'  # underscore colours - needs tmux-3.0  

set-option -g visual-activity off
set-option -g visual-bell off
set-option -g visual-silence off
set-option -g window-status-current-format "#I:#W"
set-option -g window-status-current-style "fg=yellow"
set-option -g window-status-format "#I:#W"

unbind-key      -  ; bind-key -N "Split pane into top and bottom" - split-window -v -c "#{pane_current_path}"
unbind-key      \\ ; bind-key -N "Split pane into left and right" \\ split-window -h -c "#{pane_current_path}"
unbind-key      S  ; bind-key -N "Create a new session" S command-prompt -p "New Session:" "new-session -A -s '%%'" 
unbind-key      c  ; bind-key -N "Create a new window" c new-window -c "#{pane_current_path}"
unbind-key      h  ; bind-key -N "Select the pane to the left of the active pane"  h select-pane -L
unbind-key      j  ; bind-key -N "Select the pane below the active pane"           j select-pane -D
unbind-key      k  ; bind-key -N "Select the pane above the active pane"           k select-pane -U
unbind-key      l  ; bind-key -N "Select the pane to the right of the active pane" l select-pane -R
unbind-key      t  ; bind-key -N "Create a new window" t new-window -c "#{pane_current_path}"
unbind-key      v  ; bind-key -N "Enter vim copy mode" v copy-mode

unbind-key -n C-g  ; bind-key -N "Open a new scratch tmux session in a pop-up (and allow ctr-d to close the pop-up)" -n C-g display-popup -E "tmux new-session -A -s scratch 'tmux set-option detach-on-destroy on; /usr/bin/fish'"

# unbind-key W  ; bind-key W display-popup -E "ls ~/Git | fzf --layout=reverse"
unbind-key o  ; bind-key o display-popup -h 3 -E "spotlight"

unbind-key -n   c  ; bind-key -N "Create a new session in tree-mode" -n c if -F "#{==:#{pane_mode},tree-mode}" "command-prompt 'new-session -s %1'" "send c"
unbind-key -n C-j  ; bind-key -N "Change pane if multiple panes, otherwise switch window" -n C-j if-shell "[ $(tmux list-panes | wc -l) -eq 1 ]" previous-window 'select-pane -D'
unbind-key -n C-k  ; bind-key -N "Change pane if multiple panes, otherwise switch window" -n C-k if-shell "[ $(tmux list-panes | wc -l) -eq 1 ]" next-window     'select-pane -U'
unbind-key -n M-h  ; bind-key -N "Select the pane to the left of the active pane" -n M-h select-pane -L
unbind-key -n M-l  ; bind-key -N "Select the pane to the right of the active pane if it exists" -n M-l if-shell "[ $(tmux list-panes | wc -l) -eq 1 ]" "send M-l" "select-pane -R"

unbind-key -T copy-mode-vi MouseDown1Pane ; bind-key -T copy-mode-vi MouseDown1Pane send-keys -X clear-selection # Clear selection on mouse down (better emulate selection)
unbind-key -T copy-mode-vi MouseDragEnd1Pane # https://superuser.com/a/1479667
unbind-key -T copy-mode-vi v              ; bind-key -N "Start selecting text while already in copy mode" -T copy-mode-vi v send-keys -X begin-selection
unbind-key -T copy-mode-vi y              ; bind-key -N "Yank text with y in copy mode" -T copy-mode-vi "y" send-keys -X copy-pipe "xclip -sel clip"

# read later
# https://hiandrewquinn.github.io/til-site/posts/tmux-is-worse-is-better/
# https://github.com/tmux/tmux/wiki/Control-Mode
# https://github.com/joshmedeski/sesh
# https://man7.org/linux/man-pages/man1/tmux.1.html#CONTROL_MODE

# custom right click menu
#unbind-key MouseDown3Pane
#bind-key -T root MouseDown3Pane if-shell -F -t = "#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}" {
  #select-pane -t = ; send-keys -M
#} {
  #display-menu -T "#[align=centre]#{pane_index} (#{pane_id})" -t = -x M -y M \
  #"Copy" c { send -X copy-selection-and-cancel } \
  #"Paste" p { paste-buffer -b buffer0 -p } \
  #'' \
  #"Copy (System)" s { send-keys -X copy-pipe "xclip -sel clip" } \
  #"Paste (System)" v { run-shell 'tmux set-buffer -b sys $(xclip -sel clip -o)' ; paste-buffer -p -d -b sys }
#}
